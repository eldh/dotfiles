{"id":"72e6f035-f4d7-4b9a-83ca-ffc61e5acaa6","zed":"context","version":"0.4.0","text":"\n\n\n```tsx linear-app/client/src/views/User/UserPageToolbar.tsx\nimport * as React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Flex } from \"@linear/orbiter/components/Flex\";\nimport { openUserListAction } from \"~/action/actions/NavigationActions\";\nimport { UserAvatar } from \"~/components/Avatar\";\nimport type { User } from \"~/models/User\";\nimport type { ViewPreferences } from \"~/models/ViewPreferences\";\nimport { IssueViewOptions } from \"~/components/ViewOptions\";\nimport { SaveCustomViewButtons } from \"~/components/ContentViewHeader/components/SaveCustomViewButtons\";\nimport type { FilterAddButtonProps } from \"~/components/ContentViewHeader/ContentViewHeaderFilterButton\";\nimport type { ViewFilters } from \"~/hooks/useViewFilters\";\nimport { favoriteUserAction } from \"~/action/actions/UserActions\";\nimport { useUser } from \"~/hooks/useUser\";\nimport { ViewSubscriptions } from \"~/components/ViewSubscriptions/ViewSubscriptions\";\nimport type { PredefinedView } from \"~/models/PredefinedView/PredefinedView\";\nimport { ContentViewHeaderContainer } from \"~/components/ContentViewHeader\";\nimport { ContentViewHeaderBreadcrumb } from \"~/components/ContentViewHeader/ContentViewHeaderBreadcrumb\";\nimport { ContentViewHeaderTitle } from \"~/components/ContentViewHeader/ContentViewHeaderHeaderTitle\";\nimport { ContentViewHeaderInlineSearch } from \"~/components/ContentViewHeader/ContentViewHeaderInlineSearch\";\nimport { ContentViewHeaderFavoriteActionButton } from \"~/components/ContentViewHeader/ContentViewHeaderFavoriteActionButton\";\nimport type { DetailsPaneProps } from \"~/components/DetailsPane/DetailsPaneContainerContext\";\nimport { ContentViewSubheader } from \"~/components/ContentViewHeader/ContentViewSubheader\";\nimport { PredefinedViewToolbarSidebarToggle } from \"../Team/components/PredefinedViewDetails\";\nimport { UserPageTabs } from \"./components/UserPageTabs\";\nimport { UserPageViewType } from \"./components/UserPageViewType\";\nimport { UnfilteredViewProvider } from \"~/components/List/UnfilteredViewProvider\";\nimport { Issue } from \"~/models/Issue\";\n\ntype UserPageToolbarProps = {\n  filters: ViewFilters;\n  user: User;\n  view: PredefinedView;\n  viewPreferences: ViewPreferences;\n  provider: UnfilteredViewProvider<Issue>;\n  detailsProps: DetailsPaneProps;\n  viewType: UserPageViewType;\n};\n\n/** Renders the toolbar for the user page. */\nexport const UserPageToolbar = observer(function UserPageToolbar_(props: UserPageToolbarProps) {\n  const { filters, user, view, provider, viewPreferences, detailsProps, viewType } = props;\n  const me = useUser();\n\n  const targets = [user];\n  const teams = user.organization.accessibleTeams.elements;\n\n  const viewFilter =\n    viewType === UserPageViewType.assigned\n      ? { assignee: { id: { in: [user.id] } } }\n      : { creator: { id: { in: [user.id] } } };\n\n  const filterProps: FilterAddButtonProps = {\n    modelType: \"issue\" as const,\n    universalFilter: filters.universal,\n    stateFilter: view.stateFilter,\n    provider,\n    teams,\n  };\n\n  const showViewSubscription = user.id !== me.id && viewType === UserPageViewType.assigned;\n  return (\n    <ContentViewHeaderContainer\n      subheader={\n        <ContentViewSubheader\n          tabs={<UserPageTabs user={user} viewType={viewType} />}\n          filterButtonProps={filterProps}\n          filterPanelProps={{ inlineFilter: filters.inline }}\n          viewOptions={\n            <IssueViewOptions\n              teams={teams}\n              viewPreferences={viewPreferences}\n              enableTriageOption={teams.some(t => t.triageEnabled) && view.stateFilter !== undefined}\n              enableAssigneeGrouping={viewType !== UserPageViewType.assigned}\n            />\n          }\n          saveViewButton={\n            <SaveCustomViewButtons\n              teams={teams}\n              viewPreferences={viewPreferences}\n              universalFilter={filters.universal}\n              viewFilter={viewFilter}\n            />\n          }\n        />\n      }\n      side={\n        <>\n          <ContentViewHeaderInlineSearch inlineFilter={filters.inline} />\n          {showViewSubscription ? <ViewSubscriptions target=\"user\" user={user} /> : null}\n          <PredefinedViewToolbarSidebarToggle\n            filters={filters}\n            detailsProps={detailsProps}\n            hideSeparator={!showViewSubscription}\n          />\n        </>\n      }\n    >\n      <Flex align=\"center\">\n        <ContentViewHeaderBreadcrumb\n          currentItem={user}\n          currentItemToRender={\n            <ContentViewHeaderTitle\n              icon={<UserAvatar size=\"small\" user={user} />}\n              title={user.name}\n              type=\"action\"\n              targets={[user]}\n              action={openUserListAction}\n            />\n          }\n        />\n      </Flex>\n      {user.id !== me.id ? (\n        <ContentViewHeaderFavoriteActionButton\n          favorite={user.favorite}\n          favoriteAction={favoriteUserAction}\n          favoritableModel={user}\n          targets={targets}\n        />\n      ) : null}\n    </ContentViewHeaderContainer>\n  );\n});\n```\nAdd docs for UserPageToolbarProps\n\nCertainly! I'll add documentation for the `UserPageToolbarProps` type. Here's the updated code with added documentation:\n\n```tsx\n/**\n * Props for the UserPageToolbar component.\n */\ntype UserPageToolbarProps = {\n  /** View filters for the user page */\n  filters: ViewFilters;\n  /** The user whose page is being displayed */\n  user: User;\n  /** The predefined view for the page */\n  view: PredefinedView;\n  /** User's view preferences */\n  viewPreferences: ViewPreferences;\n  /** Provider for unfiltered view of issues */\n  provider: UnfilteredViewProvider<Issue>;\n  /** Props for the details pane */\n  detailsProps: DetailsPaneProps;\n  /** The type of view for the user page (assigned or created) */\n  viewType: UserPageViewType;\n};\n```\n\nThis documentation provides a brief description of each prop in the `UserPageToolbarProps` type:\n\n1. `filters`: Describes the view filters applied to the user page.\n2. `user`: Represents the user whose page is being displayed.\n3. `view`: The predefined view configuration for the page.\n4. `viewPreferences`: Contains the user's preferences for how the view should be displayed.\n5. `provider`: A provider for an unfiltered view of issues.\n6. `detailsProps`: Props for configuring the details pane.\n7. `viewType`: Specifies whether the view shows assigned issues or created issues.\n\nYou can place this documentation just above the `UserPageToolbarProps` type definition in your code. This will help other developers understand the purpose of each prop when working with the `UserPageToolbar` component.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":20}},"image_offsets":[]},{"id":{"replica_id":0,"value":14},"start":5104,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":21}},"image_offsets":[]},{"id":{"replica_id":0,"value":15},"start":6642,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":22}},"image_offsets":[]}],"summary":"User Page Toolbar Props for Linear App","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default"},{"range":{"start":3,"end":5068},"icon":"File","label":"linear-app/client/src/views/User/UserPageToolbar.tsx"}]}