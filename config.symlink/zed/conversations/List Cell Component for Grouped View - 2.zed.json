{"id":"7bb8855f-6c63-459f-aed2-52e8b205b2f3","zed":"context","version":"0.4.0","text":"\n\n\n```tsx linear-app/client/src/components/List/components/ListCellNew.tsx\nimport * as React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useAsRef } from \"@linear/orbiter/hooks/useAsRef\";\nimport { useNavigationFocusKeyboardActive } from \"@linear/orbiter/hooks/useNavigationFocusKeyboardActive\";\nimport { useGroupedViewDataContext } from \"@linear/orbiter/components/GroupedView/GroupedViewDataContext\";\nimport type { GroupedViewItem } from \"@linear/orbiter/components/GroupedView/GroupedViewTypes\";\nimport { useIsKeyPressedRef } from \"~/hooks/useIsKeyPressedRef\";\nimport { useIsSplitView } from \"~/hooks/useIsSplitView\";\nimport type { ItemIndices } from \"~/hooks/selection/GroupedViewSelectionTypes\";\nimport type { AnyGroupedDataProvider } from \"./dataProviders/GroupedViewDataProvider\";\nimport { RowWrapper } from \"./RowWrappers\";\n\ntype Props = {\n  /** The GroupedViewItem to render */\n  item: GroupedViewItem<unknown>;\n  /** The legacy (pre-refactor) item indices. Will be removed when we have the new provider (if not before). */\n  legacyItem: ItemIndices;\n  style: React.CSSProperties;\n  /** The component to render as a child */\n  childComponent: React.ComponentType<unknown>;\n};\n\n/**\n * Renders List items with appropriate component and styling for GroupedList.\n */\nexport const ListCell = observer(function ListCell_(props: Props) {\n  const { provider, state } = useGroupedViewDataContext<AnyGroupedDataProvider>();\n  const {\n    item: { key },\n  } = props;\n  const $isSelected = React.useMemo(\n    () => state.selectedItems.some(item => item === key),\n    [state.selectedItems.join(\"\")]\n  );\n\n  const $isActive = state.activeItem === key;\n  const $isKeyboardActive = Boolean($isActive) && state.keyboardActive;\n  const $isFocused = state.focusedItem === key;\n  const selectedItemsRef = useAsRef(state.selectedItems);\n\n  const result = React.useMemo(() => {\n    return (\n      <ListCellComponent\n        $isSelected={$isSelected}\n        $isActive={$isActive}\n        $isKeyboardActive={$isKeyboardActive}\n        $isFocused={$isFocused}\n        onFocus={() => state.focus(key)}\n        onClick={() => {\n          // TODO implement\n        }}\n        item={props.item}\n        // onContextMenuCapture={onContextMenuCapture}\n        onSelect={() => state.cmdSelect(key)}\n        onSelectAllInGroup={() => {\n          // TODO implement\n        }}\n        onHover={() => {\n          if (key !== state.activeItem) {\n            state.activate({ item: key, keyboardActive: false });\n          }\n        }}\n        provider={provider}\n        selectedItemsRef={selectedItemsRef}\n        style={props.style}\n        legacyItem={props.legacyItem}\n        childComponent={props.childComponent}\n      />\n    );\n  }, [\n    provider,\n    props.legacyItem,\n    props.childComponent,\n    $isActive,\n    $isKeyboardActive,\n    $isFocused,\n    selectedItemsRef,\n    $isSelected,\n  ]);\n  return result;\n});\n\ninterface PropsAndProvider {\n  item: GroupedViewItem<unknown>;\n  legacyItem: ItemIndices;\n  style: React.CSSProperties;\n  provider: AnyGroupedDataProvider;\n  $isActive: boolean;\n  $isKeyboardActive: boolean;\n  $isFocused: boolean;\n  $isSelected: boolean;\n  selectedItemsRef: React.MutableRefObject<string[]>;\n  onClick(event: React.MouseEvent<HTMLElement>, key: string): void;\n  onSelect(key: string, addToSelection?: boolean): void;\n  onSelectAllInGroup(groupIndex: number): void;\n  onFocus(key: string): void;\n  onHover?(key: string): void;\n  onContextMenuCapture?(key: string): void;\n  withLongPress?: boolean;\n  childComponent: React.ComponentType<unknown>;\n}\n/**\n * Handles most of the rendering logic for the row\n */\nconst ListCellComponent = observer(function ListCellComponent_(props: PropsAndProvider) {\n  const {\n    item,\n    legacyItem,\n    style,\n    onClick,\n    onSelect,\n    onHover,\n    onFocus,\n    onContextMenuCapture,\n    provider,\n    $isActive,\n    $isKeyboardActive,\n    $isSelected,\n    selectedItemsRef,\n    childComponent: ChildComponent,\n  } = props;\n  const { key } = item;\n  const ref = React.useRef<HTMLElement>(null);\n  const isSplitView = useIsSplitView();\n\n  useNavigationFocusKeyboardActive(ref, $isKeyboardActive);\n\n  const onMouseMove = React.useMemo(\n    () =>\n      onHover\n        ? (e: React.MouseEvent) => {\n            if (e.metaKey && e.movementY === 0 && e.movementX === 0) {\n              // Handle Safari bug where onMouseMove would trigger on cmd click. In this case don't trigger the callback.\n              return;\n            }\n            onHover(key);\n          }\n        : undefined,\n    [onHover, key]\n  );\n\n  const handleClick = React.useCallback(\n    (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      onClick(event, key);\n      provider.handleNavigateToItem?.(legacyItem);\n    },\n    [onClick, provider, key]\n  );\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      if (event.key === \"Enter\") {\n        // On split views navigation is done as soon as item is active, so enter should be a noop Allowing it to\n        // actually trigger might result in duplicate breadcrumbs as the native link navigation would also trigger\n        if (isSplitView) {\n          return;\n        }\n\n        // Already handled by useGroupedViewSelection to open selection\n        // in new tabs, both on desktop app and browser\n        if (event.metaKey) {\n          return;\n        }\n\n        // provider.handleNavigateToItem?.(item);\n      }\n    },\n    [provider, key, isSplitView]\n  );\n\n  const handleContextMenuCapture = React.useMemo(\n    () => (onContextMenuCapture ? () => onContextMenuCapture(key) : undefined),\n    [onContextMenuCapture, key]\n  );\n  let child = (\n    <ChildComponent\n      {...{\n        onSelect,\n        model: item.data,\n        isSelected: $isSelected,\n        isActive: $isActive,\n        isKeyboardActive: $isKeyboardActive,\n        viewPreferences: provider.viewPreferences,\n        provider,\n        item: legacyItem,\n        groupIndex: legacyItem.groupIndex,\n        items: item.subItems?.map(i => i.data) ?? [],\n      }}\n    />\n  );\n  const tabPressedRef = useIsKeyPressedRef(e => e.key === \"Tab\");\n\n  return React.useMemo(() => {\n    const pathname = provider.path(props.legacyItem);\n\n    const sharedProps = {\n      ref,\n      style,\n      $isSelected,\n      to: pathname ? (typeof pathname === \"string\" ? { pathname } : pathname) : undefined,\n      $isActive,\n      \"data-selected\": $isSelected,\n      \"data-active\": $isActive,\n      \"data-list-key\": item.key,\n      $isKeyboardActive,\n      onMouseMove,\n      onContextMenuCapture: handleContextMenuCapture,\n      onClick: handleClick,\n      onKeyDown: handleKeyDown,\n      tabIndex: item.interactive ? 0 : undefined,\n      onFocus: () => {\n        // `tabPressRef` is a hack to prevent onFocus handler from triggering on mouse press. Otherwise it would interfere with the click handler. We need the focus handler though for when user navigates to an item with keyboard.\n        tabPressedRef.current && onFocus(key);\n      },\n      children: child,\n    };\n\n    return <RowWrapper {...sharedProps} />;\n  }, [\n    provider,\n    onSelect,\n    onClick,\n    onContextMenuCapture,\n    selectedItemsRef.current,\n    provider.viewPreferences?.serializedSettings,\n    $isActive,\n    $isKeyboardActive,\n    $isSelected,\n    style,\n  ]);\n});\n```\ndiagnostics: linear-app/client/src/components/List/components/ListCellNew.tsx\n```tsx\n  );\n  let child = (\n    <ChildComponent\n// error: Type '{ onSelect: (key: string, addToSelection?: boolean | undefined) => void; model: unknown; isSelected: boolean; isActive: boolean; isKeyboardActive: boolean; viewPreferences: ViewPreferences | undefined; provider: AnyGroupedDataProvider; item: ItemIndices; groupIndex: number; items: unknown[]; }' has no properties in common with type 'IntrinsicAttributes'.\n      {...{\n        onSelect,\n```\n\ngenerate the interface for childCOmpopnent props\n\nBased on the error message and the code provided, it seems that the `ChildComponent` is being passed props that are not properly typed. To resolve this, we should create an interface for the `ChildComponent` props. Here's a suggested interface based on the properties being passed:\n\n```typescript\ninterface ChildComponentProps {\n  onSelect: (key: string, addToSelection?: boolean) => void;\n  model: unknown;\n  isSelected: boolean;\n  isActive: boolean;\n  isKeyboardActive: boolean;\n  viewPreferences: ViewPreferences | undefined;\n  provider: AnyGroupedDataProvider;\n  item: ItemIndices;\n  groupIndex: number;\n  items: unknown[];\n}\n```\n\nYou should then update the `childComponent` prop type in the `Props` interface:\n\n```typescript\ntype Props = {\n  // ... other props\n  childComponent: React.ComponentType<ChildComponentProps>;\n};\n```\n\nAnd similarly in the `PropsAndProvider` interface:\n\n```typescript\ninterface PropsAndProvider {\n  // ... other props\n  childComponent: React.ComponentType<ChildComponentProps>;\n}\n```\n\nFinally, you may need to import or define the `ViewPreferences` type if it's not already available in this file.\n\nAfter making these changes, the TypeScript error should be resolved, and you'll have proper type checking for the props passed to the `ChildComponent`.\ndocument all properties inChildComponentProps and ListCellComponentProps\nCertainly! I'll document all the properties for both `ChildComponentProps` and `ListCellComponentProps` (which I assume you mean instead of `ListCellComponent_` props, as that's not explicitly defined in the provided code). Here's a detailed breakdown:\n\n```typescript\ninterface ChildComponentProps {\n  /** Function to handle selection of an item */\n  onSelect: (key: string, addToSelection?: boolean) => void;\n  \n  /** The data model for the current item */\n  model: unknown;\n  \n  /** Indicates if the current item is selected */\n  isSelected: boolean;\n  \n  /** Indicates if the current item is active */\n  isActive: boolean;\n  \n  /** Indicates if the current item is keyboard active */\n  isKeyboardActive: boolean;\n  \n  /** View preferences for the list */\n  viewPreferences: ViewPreferences | undefined;\n  \n  /** The data provider for the grouped view */\n  provider: AnyGroupedDataProvider;\n  \n  /** Legacy item indices */\n  item: ItemIndices;\n  \n  /** The index of the group this item belongs to */\n  groupIndex: number;\n  \n  /** Array of sub-items data */\n  items: unknown[];\n}\n\ninterface ListCellComponentProps {\n  /** The GroupedViewItem to render */\n  item: GroupedViewItem<unknown>;\n  \n  /** Legacy item indices */\n  legacyItem: ItemIndices;\n  \n  /** CSS styles for the list cell */\n  style: React.CSSProperties;\n  \n  /** The data provider for the grouped view */\n  provider: AnyGroupedDataProvider;\n  \n  /** Indicates if the current item is active */\n  $isActive: boolean;\n  \n  /** Indicates if the current item is keyboard active */\n  $isKeyboardActive: boolean;\n  \n  /** Indicates if the current item is focused */\n  $isFocused: boolean;\n  \n  /** Indicates if the current item is selected */\n  $isSelected: boolean;\n  \n  /** Reference to the array of selected item keys */\n  selectedItemsRef: React.MutableRefObject<string[]>;\n  \n  /** Handler for click events */\n  onClick: (event: React.MouseEvent<HTMLElement>, key: string) => void;\n  \n  /** Handler for selecting an item */\n  onSelect: (key: string, addToSelection?: boolean) => void;\n  \n  /** Handler for selecting all items in a group */\n  onSelectAllInGroup: (groupIndex: number) => void;\n  \n  /** Handler for focusing an item */\n  onFocus: (key: string) => void;\n  \n  /** Optional handler for hover events */\n  onHover?: (key: string) => void;\n  \n  /** Optional handler for context menu events */\n  onContextMenuCapture?: (key: string) => void;\n  \n  /** Optional flag for long press functionality */\n  withLongPress?: boolean;\n  \n  /** The component to render as a child */\n  childComponent: React.ComponentType<ChildComponentProps>;\n}\n```\n\nThese interfaces provide a comprehensive documentation of the props used in the `ListCell` and its child components. The `ChildComponentProps` interface describes the props passed to the `ChildComponent`, while the `ListCellComponentProps` interface (which I've named based on the `ListCellComponent_` function) describes the props used in the `ListCellComponent_` function.\n\nThis documentation will help developers understand the purpose of each prop and improve the maintainability of the code.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":82}},"image_offsets":[]},{"id":{"replica_id":0,"value":11},"start":7926,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":83}},"image_offsets":[]},{"id":{"replica_id":0,"value":12},"start":9209,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":84}},"image_offsets":[]},{"id":{"replica_id":0,"value":69},"start":9282,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":85}},"image_offsets":[]},{"id":{"replica_id":0,"value":70},"start":12389,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":86}},"image_offsets":[]}],"summary":"List Cell Component for Grouped View","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default"},{"range":{"start":3,"end":7875},"icon":"File","label":"linear-app/client/src/components/List/components/ListCellNew.tsx"},{"range":{"start":7342,"end":7875},"icon":"ExclamationTriangle","label":"Diagnostics (linear-app/client/src/components/List/components/ListCellNew.tsx): 1 errors"},{"range":{"start":7420,"end":7874},"icon":"XCircle","label":"Type '{ onSelect: (key: string, addToSelection?: boolean | undefined) => void; model: unknown; isSelected: boolean; isActive: boolean; isKeyboardActive: boolean; viewPreferences: ViewPreferences | undefined; provider: AnyGroupedDataProvider; item: ItemIndices; groupIndex: number; items: unknown[]; }' has no properties in common with type 'IntrinsicAttributes'."}]}