{"id":"ef3f8380-f9b1-4c08-9121-0202c56999e1","zed":"context","version":"0.4.0","text":"\n\n\n```tsx linear-app/client/src/views/CustomViews/CustomViewDetails.tsx\nimport * as React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport styled from \"styled-components\";\nimport { DecorativeIconType } from \"@linear/common/icons/DecorativeIconType\";\nimport { ViewType } from \"@linear/common/views/ViewType\";\nimport { IconButton } from \"@linear/orbiter/components/IconButton\";\nimport { Flex } from \"@linear/orbiter/components/Flex\";\nimport { MenuIcon } from \"@linear/orbiter/icons/base/MenuIcon\";\nimport { Scrollable } from \"@linear/orbiter/components/Scrollable\";\nimport { typedKeys } from \"@linear/common/types\";\nimport {\n  contextualCustomViewActions,\n  contextualSidebarCustomViewActions,\n} from \"~/action/actions/ContextualMenuActions\";\nimport { favoriteCustomViewAction } from \"~/action/actions/CustomViewActions\";\nimport { ContextualMenu } from \"~/components/ContextualMenu\";\nimport type { GroupingIssueViewDataProvider } from \"~/components/List/components/dataProviders/GroupingIssueViewDataProvider\";\nimport { FavoriteStarWithAction } from \"~/components/FavoriteStarWithAction\";\nimport { suspenseObserver } from \"~/components/suspenseObserver\";\nimport { useUserSettings } from \"~/hooks/useUserSettings\";\nimport type { ViewFilters } from \"~/hooks/useViewFilters\";\nimport type { CustomProjectView, CustomIssueView } from \"~/models/CustomView\";\nimport type { Issue } from \"~/models/Issue\";\nimport type { Project } from \"~/models/Project\";\nimport type { ViewPreferences } from \"~/models/ViewPreferences\";\nimport { resolvePromise } from \"~/models/hydration/resolvePromise\";\nimport { SearchParam, getSearchParams } from \"~/utils/urls\";\nimport {\n  DetailsPaneFooter,\n  DetailsPanePropertyName,\n  DetailsPanePropertyValue,\n  DetailsPaneSection,\n  DetailsPaneSeparator,\n} from \"~/components/DetailsPane/DetailsPane\";\nimport { DetailsPaneTab } from \"~/components/DetailsPane/DetailsPaneTab\";\nimport { IssuesQuickFilters } from \"~/views/Team/components/DetailsPane/IssuesQuickFilters\";\nimport type { QuickFilters } from \"~/views/Team/components/DetailsPane/QuickFilterTypes\";\nimport { TitleDescriptionSection } from \"~/views/Team/components/DetailsPane/TitleDescriptionSection\";\nimport { ProjectsQuickFilters } from \"~/views/Team/components/DetailsPane/ProjectsQuickFilters\";\nimport type { Insights } from \"~/views/Team/components/Insights/Insights\";\nimport { InsightsPanel } from \"~/views/Team/components/Insights/components/InsightsPanel\";\nimport { useHasInsights } from \"~/views/Team/components/Insights/hooks/useHasInsights\";\nimport type { ProjectsDataProvider } from \"~/components/List/components/dataProviders/ProjectsDataProvider\";\nimport { useQuickFilterRespectFilters } from \"~/views/Team/components/DetailsPane/useQuickFilterRespectFilters\";\nimport type { FilteredViewItems } from \"~/components/List/FilteredViewItems\";\nimport { CustomViewVisibilitySelect } from \"./components/CustomViewVisibilitySelect\";\nimport { CustomViewOwnerSelect } from \"./components/CustomViewOwnerSelect\";\n\ntype CustomIssueViewDetailsProps = {\n  customView: CustomIssueView;\n  provider: FilteredViewItems<Issue>;\n  viewPreferences: ViewPreferences;\n  filters: ViewFilters<Issue>;\n};\n\n/** Shows a details pane for a issue custom view. */\nexport const CustomIssueViewDetails = suspenseObserver(function CustomIssueViewDetails_(\n  props: CustomIssueViewDetailsProps\n) {\n  const { customView, filters, viewPreferences, provider } = props;\n  const hasInsights = useHasInsights();\n  const userSettings = useUserSettings();\n  const tab = userSettings.customViewDetailPaneTab;\n\n  // If insights are available, and the insights tab is selected in the URL, switch to insights tab\n  React.useLayoutEffect(() => {\n    if (hasInsights && getSearchParams().has(SearchParam.insights)) {\n      userSettings.customViewDetailPaneTab = DetailsPaneTab.insights;\n    }\n  }, []);\n\n  // If insights are not available, but the insights tab is selected, switch to overview tab\n  React.useEffect(() => {\n    if (!hasInsights && tab === DetailsPaneTab.insights) {\n      userSettings.customViewDetailPaneTab = DetailsPaneTab.overview;\n    }\n  }, [hasInsights]);\n\n  // When switching away from the overview tab, reset quick filters\n  // When switching away from the insights tab, reset insights filters\n  React.useEffect(() => {\n    if (tab !== DetailsPaneTab.overview && filters.quick) {\n      const quickFilterKeys = typedKeys(filters.quick);\n      for (const key of quickFilterKeys) {\n        filters.quick[key]?.reset();\n      }\n    }\n\n    if (tab !== DetailsPaneTab.insights) {\n      filters.insights.reset();\n    }\n  }, [tab]);\n\n  resolvePromise(customView.hydrate());\n  const insightsView: Insights.View = React.useMemo(() => ({ type: \"customView\", customView }), [customView]);\n\n  if (hasInsights) {\n    return tab === DetailsPaneTab.overview ? (\n      <CustomViewDetailsContent type=\"issue\" provider={provider} customView={customView} quickFilters={filters.quick} />\n    ) : (\n      <React.Suspense fallback={null}>\n        <InsightsPanel\n          key={customView.id}\n          filters={filters}\n          view={insightsView}\n          viewPreferences={viewPreferences}\n          provider={provider}\n        />\n      </React.Suspense>\n    );\n  }\n\n  return (\n    <CustomViewDetailsContent provider={provider} type=\"issue\" customView={customView} quickFilters={filters.quick} />\n  );\n});\n\ntype CustomProjectViewDetailsProps = {\n  customView: CustomProjectView;\n  quickFilters: QuickFilters<Project>;\n  provider: ProjectsDataProvider;\n};\n\n/** Shows a details pane for a project custom view. */\nexport const CustomProjectViewDetails = suspenseObserver(function CustomProjectViewDetails_(\n  props: CustomProjectViewDetailsProps\n) {\n  const { customView, quickFilters, provider } = props;\n  return (\n    <CustomViewDetailsContent provider={provider} type=\"project\" customView={customView} quickFilters={quickFilters} />\n  );\n});\n\ntype CustomViewDetailsContentProps =\n  | {\n      type: \"issue\";\n      provider: FilteredViewItems<Issue>;\n      customView: CustomIssueView;\n      quickFilters: QuickFilters<Issue>;\n    }\n  | {\n      type: \"project\";\n      provider: FilteredViewItems<Project>;\n      customView: CustomProjectView;\n      quickFilters: QuickFilters<Project>;\n    };\n\nconst CustomViewDetailsContent = observer(function CustomViewDetailsContent_(props: CustomViewDetailsContentProps) {\n  const { customView } = props;\n  resolvePromise(customView.hydrate());\n\n  return (\n    <Scrollable column gutter=\"stable\" aria-label=\"View sidebar\" data-restore-scroll-view=\"custom-view-sidebar\">\n      <ContextualMenu\n        trigger=\"secondary\"\n        targets={[customView]}\n        actions={contextualCustomViewActions}\n        placement=\"left-end\"\n        style={{ flexGrow: 1 }}\n      >\n        <DetailsPaneSection>\n          <TitleDescriptionSection\n            isArchived={false}\n            title={\n              <TitleDescriptionSection.Title\n                defaultIcon={DecorativeIconType.CustomView}\n                model={customView}\n                title={customView.name}\n              />\n            }\n            description={customView.description}\n            favoriteAction={\n              <FavoriteStarWithAction\n                favorite={customView.favorite}\n                favoriteAction={favoriteCustomViewAction}\n                favoritableModel={customView}\n                targets={[customView]}\n              />\n            }\n            menuAction={\n              <ContextualMenu\n                trigger=\"primary\"\n                placement=\"bottom-end\"\n                targets={[customView]}\n                actions={contextualSidebarCustomViewActions}\n              >\n                <IconButton size=\"small\" aria-label=\"Open view actions\">\n                  <MenuIcon />\n                </IconButton>\n              </ContextualMenu>\n            }\n          />\n        </DetailsPaneSection>\n        <DetailsPaneSeparator />\n        <DetailsPaneSection>\n          <Flex gap={8} align=\"center\">\n            <DetailsPanePropertyName>Visibility</DetailsPanePropertyName>\n            <DetailsPanePropertyValue>\n              <StyledCustomViewVisibilitySelect customView={customView} />\n            </DetailsPanePropertyValue>\n          </Flex>\n          <Flex gap={8} align=\"center\">\n            <DetailsPanePropertyName>Owner</DetailsPanePropertyName>\n            <DetailsPanePropertyValue>\n              <StyledCustomViewOwnerSelect customView={customView} />\n            </DetailsPanePropertyValue>\n          </Flex>\n        </DetailsPaneSection>\n\n        <DetailsPaneSeparator />\n\n        {props.type === \"project\" ? (\n          <ProvidedProjectQuickFilters provider={props.provider} quickFilters={props.quickFilters} />\n        ) : (\n          <ProvidedIssueQuickFilters\n            modelId={customView.id}\n            provider={props.provider}\n            quickFilters={props.quickFilters}\n          />\n        )}\n\n        <DetailsPaneFooter />\n      </ContextualMenu>\n    </Scrollable>\n  );\n});\n\nconst ProvidedProjectQuickFilters = observer(function ProvidedProjectQuickFilters_(props: {\n  provider: FilteredViewItems<Project>;\n  quickFilters: QuickFilters<Project>;\n}) {\n  const { provider, quickFilters } = props;\n  const projects = useQuickFilterRespectFilters<Project>(provider);\n  return <ProjectsQuickFilters projects={projects} quickFilters={quickFilters} />;\n});\n\nconst ProvidedIssueQuickFilters = observer(function ProvidedIssueQuickFilters_(props: {\n  modelId: string;\n  provider: FilteredViewItems<Issue>;\n  quickFilters: QuickFilters<Issue>;\n}) {\n  const { provider, modelId, quickFilters } = props;\n  const issues = useQuickFilterRespectFilters<Issue>(provider);\n  return (\n    <IssuesQuickFilters\n      modelId={modelId}\n      issues={issues}\n      quickFilters={quickFilters}\n      display=\"count\"\n      hasEstimates={issues.every(issue => issue.team.estimationEnabled)}\n      viewType={ViewType.customView}\n    />\n  );\n});\n\nconst StyledCustomViewOwnerSelect = styled(CustomViewOwnerSelect)`\n  margin: 0 0 0 -6px;\n`;\n\nconst StyledCustomViewVisibilitySelect = styled(CustomViewVisibilitySelect)`\n  margin: -3px -6px;\n`;\n```\ndocument all props in the file\nHere's a documentation of all props used in the components within this file:\n\n1. CustomIssueViewDetails:\n   - customView: CustomIssueView\n   - provider: FilteredViewItems<Issue>\n   - viewPreferences: ViewPreferences\n   - filters: ViewFilters<Issue>\n\n2. CustomProjectViewDetails:\n   - customView: CustomProjectView\n   - quickFilters: QuickFilters<Project>\n   - provider: ProjectsDataProvider\n\n3. CustomViewDetailsContent:\n   - type: \"issue\" | \"project\"\n   - provider: FilteredViewItems<Issue> | FilteredViewItems<Project>\n   - customView: CustomIssueView | CustomProjectView\n   - quickFilters: QuickFilters<Issue> | QuickFilters<Project>\n\n4. ProvidedProjectQuickFilters:\n   - provider: FilteredViewItems<Project>\n   - quickFilters: QuickFilters<Project>\n\n5. ProvidedIssueQuickFilters:\n   - modelId: string\n   - provider: FilteredViewItems<Issue>\n   - quickFilters: QuickFilters<Issue>\n\n6. TitleDescriptionSection:\n   - isArchived: boolean\n   - title: React.ReactNode\n   - description: string | undefined\n   - favoriteAction: React.ReactNode\n   - menuAction: React.ReactNode\n\n7. FavoriteStarWithAction:\n   - favorite: boolean\n   - favoriteAction: Function\n   - favoritableModel: CustomIssueView | CustomProjectView\n   - targets: Array<CustomIssueView | CustomProjectView>\n\n8. ContextualMenu:\n   - trigger: \"primary\" | \"secondary\"\n   - placement: \"left-end\" | \"bottom-end\"\n   - targets: Array<CustomIssueView | CustomProjectView>\n   - actions: Function\n\n9. StyledCustomViewOwnerSelect:\n   - customView: CustomIssueView | CustomProjectView\n\n10. StyledCustomViewVisibilitySelect:\n    - customView: CustomIssueView | CustomProjectView\n\nThese props are used to pass data and callbacks between components, controlling their behavior and appearance based on the custom view type (issue or project) and associated data.\nadd doc comments to the props in CustomIssueViewDetailsProps\nCertainly! I'll add documentation comments to the props in the CustomIssueViewDetailsProps interface. Here's the updated version:\n\n```typescript\ntype CustomIssueViewDetailsProps = {\n  /** The custom issue view object being displayed */\n  customView: CustomIssueView;\n\n  /** Data provider for the filtered view items (issues) */\n  provider: FilteredViewItems<Issue>;\n\n  /** View preferences for the current user */\n  viewPreferences: ViewPreferences;\n\n  /** Filters applied to the view, including quick filters and insights */\n  filters: ViewFilters<Issue>;\n};\n```\n\nThese doc comments provide a brief description of each prop, explaining its purpose and what kind of data it represents. This can be helpful for developers working with this component, as it provides quick insights into what each prop is used for without having to dig into the implementation details.\nand CustomProjectViewDetailsProps\nCertainly! I'll add documentation comments to the props in the CustomProjectViewDetailsProps interface as well. Here's the updated version:\n\n```typescript\ntype CustomProjectViewDetailsProps = {\n  /** The custom project view object being displayed */\n  customView: CustomProjectView;\n\n  /** Quick filters applied to the project view */\n  quickFilters: QuickFilters<Project>;\n\n  /** Data provider for the projects in the view */\n  provider: ProjectsDataProvider;\n};\n```\n\nThese doc comments provide a brief description of each prop in the CustomProjectViewDetailsProps interface, explaining their purpose and the type of data they represent. This documentation helps developers understand the expected input for the CustomProjectViewDetails component at a glance.\nand CustomViewDetailsContentProps\nCertainly! I'll add documentation comments to the CustomViewDetailsContentProps type. Since this is a union type with two variants, I'll document both variants:\n\n```typescript\ntype CustomViewDetailsContentProps =\n  | {\n      /** Indicates that this is an issue view */\n      type: \"issue\";\n      /** Data provider for the filtered view items (issues) */\n      provider: FilteredViewItems<Issue>;\n      /** The custom issue view object being displayed */\n      customView: CustomIssueView;\n      /** Quick filters applied to the issue view */\n      quickFilters: QuickFilters<Issue>;\n    }\n  | {\n      /** Indicates that this is a project view */\n      type: \"project\";\n      /** Data provider for the filtered view items (projects) */\n      provider: FilteredViewItems<Project>;\n      /** The custom project view object being displayed */\n      customView: CustomProjectView;\n      /** Quick filters applied to the project view */\n      quickFilters: QuickFilters<Project>;\n    };\n```\n\nThese doc comments explain the purpose of each prop in both variants of the CustomViewDetailsContentProps type. The comments highlight the differences between the issue and project view types, making it clear what data is expected for each scenario. This documentation helps developers understand how to use the CustomViewDetailsContent component correctly based on whether they're dealing with an issue view or a project view.\n```tsx linear-app/client/src/views/Team/components/Insights/components/InsightsFullscreen.tsx\nimport * as React from \"react\";\nimport styled from \"styled-components\";\nimport { color, screenSize } from \"@linear/orbiter\";\nimport { Flex, FlexSpacer } from \"@linear/orbiter/components/Flex\";\nimport { Text } from \"@linear/orbiter/components/Text\";\nimport { notReachable } from \"@linear/orbiter/errors/UnreachableCaseError\";\nimport { useComponentHeight, useComponentWidth } from \"@linear/orbiter/hooks/useComponentSize\";\nimport { sidebarAlwaysCollapsedScreenSize, useScreenSize } from \"@linear/orbiter/hooks/useScreenSize\";\nimport { thinBorderThemed } from \"@linear/orbiter/styles/mixins\";\nimport { MultiLabelIcon } from \"@linear/orbiter/icons/base\";\nimport { ContentViewHeaderFilterButton } from \"~/components/ContentViewHeader/ContentViewHeaderFilterButton\";\nimport { NormalFilterWrapper } from \"~/components/ContentViewHeader/ContentViewHeaderFilterPanel\";\nimport { CustomIssueFilterPanel } from \"~/components/ContentViewHeader/components/CustomIssueFilterPanel\";\nimport { ToggleFilterOperator } from \"~/components/ContentViewHeader/components/ToggleFilterOperator\";\nimport type { FilteredViewItems } from \"~/components/List/FilteredViewItems\";\nimport { SidebarCollapsedNavigation } from \"~/components/Sidebar/SidebarCollapsedNavigation\";\nimport { useWithinNavigationStack } from \"~/hooks/useWithinNavigationStack\";\nimport { useStore } from \"~/hooks/useStore\";\nimport { useUserSettings } from \"~/hooks/useUserSettings\";\nimport type { Issue } from \"~/models/Issue\";\nimport type { Team } from \"~/models/Team\";\nimport type { UniversalCollectionFilter } from \"~/models/collections/UniversalCollectionFilter\";\nimport { ModalNavigationHeader } from \"~/views/IssueView/ModalIssuePageNavigation\";\nimport { UserPageViewType } from \"~/views/User/components/UserPageViewType\";\nimport { ContentViewHeaderBreadcrumbChevron } from \"~/components/ContentViewHeader/ContentViewHeaderBreadcrumbChevron\";\nimport { ContentViewHeaderTitle } from \"~/components/ContentViewHeader/ContentViewHeaderHeaderTitle\";\nimport { TeamIcon } from \"~/components/Team/TeamIcon\";\nimport { ProjectIcon } from \"~/components/ProjectIcon\";\nimport { CycleIcon } from \"~/assets/icons/CycleIcon\";\nimport { CustomViewIcon } from \"~/components/CustomViewIcon\";\nimport { ColorBadge } from \"~/components/ColorBadge\";\nimport { FullPageModal } from \"~/components/FullPageModal/FullPageModal\";\nimport { FullPageModalCloseButton } from \"~/components/FullPageModal/FullPageModalButton\";\nimport { MyIssuesViewType } from \"../../MyIssues/MyIssuesViewType\";\nimport type { InsightStatus } from \"../hooks/useInsight\";\nimport type { Insights } from \"../Insights\";\nimport { Insight } from \"../Insight\";\nimport type { InsightsHovered } from \"./InsightsHovered\";\nimport type { InsightsFilters } from \"./InsightsFilters\";\nimport { InsightControlsPanel, InsightTitleContent, InsightTitleContextualMenu } from \"./InsightControlsPanel\";\nimport type { InsightControls } from \"./InsightControls\";\n\ntype Props = {\n  controls: InsightControls;\n  insight: InsightStatus;\n  hovered: InsightsHovered;\n  universalFilter: UniversalCollectionFilter<Issue>;\n  insightsFilters: InsightsFilters;\n  teams: Team[];\n  view: Insights.View;\n  provider: FilteredViewItems<Issue>;\n  hideFilters: boolean;\n};\n\nconst CONTROLS_WIDTH = 250;\n\n/** Renders the fullscreen view of Insights */\nexport function InsightsFullscreen(props: Props) {\n  return (\n    <FullPageModal>\n      <InsightsFullscreenPortal {...props} />\n    </FullPageModal>\n  );\n}\n\n/** Renders the fullscreen view of Insights in a portal */\nfunction InsightsFullscreenPortal(props: Props) {\n  const { controls, insight, teams, universalFilter, view, provider } = props;\n\n  const ref = React.useRef(null);\n  const store = useStore();\n  const width = useComponentWidth(ref);\n  const height = useComponentHeight(ref);\n  const isWithinNavigationStack = useWithinNavigationStack();\n  const userSettings = useUserSettings();\n  const isSmall = useScreenSize(sidebarAlwaysCollapsedScreenSize);\n\n  const isCollapsedSidebar = userSettings.sidebarCollapsed;\n  const filterTeams = teams.length === 0 ? store.organization.accessibleTeams.elements : teams;\n\n  const toggleFilters =\n    universalFilter.filterCount > 1 ? <ToggleFilterOperator universalFilter={universalFilter} /> : null;\n  const { icon, title } = getViewInfo(props.view);\n\n  const closeFullScreen = React.useCallback(() => {\n    controls.closeFullscreen();\n  }, []);\n\n  return (\n    <FullscreenModal ref={ref}>\n      {width && height && !isWithinNavigationStack ? (\n        <>\n          <Header $isDesktopAndCollapsed={isCollapsedSidebar && !isSmall}>\n            {isSmall ? null : <SidebarCollapsedNavigation />}\n            <Flex align=\"center\">\n              <ContentViewHeaderTitle icon={icon} type=\"text\" title={title} onClick={closeFullScreen} />\n              <ContentViewHeaderBreadcrumbChevron />\n              <Text color=\"labelMuted\" type=\"smallPlus\">\n                Insights\n              </Text>\n            </Flex>\n            <InsightTitleContextualMenu\n              controls={controls}\n              insight={insight}\n              universalFilter={universalFilter}\n              view={view}\n              fullscreen\n            />\n            {props.hideFilters ? null : (\n              <ContentViewHeaderFilterButton\n                modelType=\"issue\"\n                universalFilter={universalFilter}\n                provider={provider}\n                teams={filterTeams}\n              />\n            )}\n            <FlexSpacer />\n            <FullPageModalCloseButton onClose={closeFullScreen} />\n          </Header>\n\n          <Content>\n            {universalFilter.filterCount > 0 ? (\n              <CustomIssueFilterPanel universalFilter={universalFilter} provider={provider} teams={filterTeams}>\n                {panel => <FilterWrapper filter={panel} side={toggleFilters} />}\n              </CustomIssueFilterPanel>\n            ) : null}\n\n            <Flex align=\"center\" style={{ padding: \"30px 0 0 30px\", height: 54 }}>\n              <InsightTitleContent insight={insight} fullscreen />\n            </Flex>\n\n            <Insight\n              controls={controls}\n              insight={insight}\n              hovered={props.hovered}\n              teams={teams}\n              width={width - CONTROLS_WIDTH}\n              height={0.4 * height}\n              insightsFilters={props.insightsFilters}\n            />\n          </Content>\n\n          <Controls>\n            <InsightControlsPanel\n              key={controls.key}\n              insight={insight}\n              controls={controls}\n              teams={teams}\n              width={CONTROLS_WIDTH}\n              view={view}\n              universalFilter={universalFilter}\n            />\n          </Controls>\n        </>\n      ) : null}\n    </FullscreenModal>\n  );\n}\n\nfunction getViewInfo(view: Insights.View): { icon?: JSX.Element; title: string } {\n  switch (view.type) {\n    case \"issue\":\n      switch (view.view) {\n        case \"all\":\n          return { title: \"All issues\", icon: <TeamIcon team={view.team} /> };\n        case \"active\":\n          return { title: \"Active issues\", icon: <TeamIcon team={view.team} /> };\n        case \"backlog\":\n          return { title: \"Backlog\", icon: <TeamIcon team={view.team} /> };\n        default:\n          throw notReachable(view);\n      }\n\n    case \"project\":\n      return { title: view.project.name, icon: <ProjectIcon project={view.project} /> };\n\n    case \"cycle\":\n      return { title: view.cycle.displayName, icon: <CycleIcon cycle={view.cycle} strongColors /> };\n\n    case \"customView\":\n      return { title: view.customView.name || \"New view\", icon: <CustomViewIcon customView={view.customView} /> };\n\n    case \"label\":\n      return {\n        title: view.label.name,\n        icon: view.label.isGroup ? (\n          <MultiLabelIcon color={view.label.color} />\n        ) : (\n          <ColorBadge size=\"small\" color={view.label.color} />\n        ),\n      };\n\n    case \"user\":\n      switch (view.view) {\n        case UserPageViewType.assigned:\n          return { title: `Assigned to ${view.user.name}` };\n        case UserPageViewType.created:\n          return { title: `Created by ${view.user.name}` };\n        default:\n          throw notReachable(view);\n      }\n\n    case \"my-issues\":\n      switch (view.view) {\n        case MyIssuesViewType.assigned:\n          return { title: `Assigned to me` };\n        case MyIssuesViewType.created:\n          return { title: `Created by me` };\n        case MyIssuesViewType.subscribed:\n          return { title: `Issues you're subscribed to` };\n        default:\n          throw notReachable(view);\n      }\n\n    default:\n      throw notReachable(view);\n  }\n}\n\nconst FullscreenModal = styled.div`\n  display: grid;\n  grid-template-columns: 1fr ${CONTROLS_WIDTH}px;\n  grid-template-rows: max-content 1fr;\n  border-radius: 6px;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst Controls = styled.div`\n  width: ${CONTROLS_WIDTH}px;\n  background: ${color(\"bgBaseHover\")};\n  border-left: 1px solid ${color(\"bgBorder\")};\n  border-bottom-right-radius: 6px;\n`;\n\nconst Header = styled(ModalNavigationHeader)`\n  grid-column: 1 / 3;\n  border-bottom: 1px solid ${color(\"bgBorder\")};\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n\n  ${screenSize.laptop} {\n    padding-right: 12px;\n  }\n\n  height: var(--header-height);\n  border-bottom: ${thinBorderThemed(\"bgBorder\")};\n  background: none;\n  padding-left: 30px;\n`;\n\nconst FilterWrapper = styled(NormalFilterWrapper)`\n  flex: none;\n  padding: 10px;\n`;\n```\nadd comments to Props\nCertainly! I'll add comments to the Props type in the InsightsFullscreen component. Here's the updated Props type with comments:\n\n```typescript\ntype Props = {\n  /** Controls for the insight, including functions to manipulate the view */\n  controls: InsightControls;\n\n  /** Current status and data of the insight */\n  insight: InsightStatus;\n\n  /** Information about which elements are currently hovered */\n  hovered: InsightsHovered;\n\n  /** Universal filter for issues */\n  universalFilter: UniversalCollectionFilter<Issue>;\n\n  /** Filters specific to insights */\n  insightsFilters: InsightsFilters;\n\n  /** List of teams relevant to the current view */\n  teams: Team[];\n\n  /** Current view configuration (e.g., project, cycle, custom view) */\n  view: Insights.View;\n\n  /** Data provider for filtered view items (issues) */\n  provider: FilteredViewItems<Issue>;\n\n  /** Flag to determine if filters should be hidden */\n  hideFilters: boolean;\n};\n```\n\nThese comments provide a brief description of each prop in the Props type, explaining their purpose and the kind of data they represent. This documentation helps developers understand what each prop is used for when working with the InsightsFullscreen component.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":302}},"image_offsets":[]},{"id":{"replica_id":0,"value":25},"start":10173,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":303}},"image_offsets":[]},{"id":{"replica_id":0,"value":26},"start":11983,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":304}},"image_offsets":[]},{"id":{"replica_id":0,"value":101},"start":12044,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":305}},"image_offsets":[]},{"id":{"replica_id":0,"value":102},"start":12911,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":306}},"image_offsets":[]},{"id":{"replica_id":0,"value":129},"start":12945,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":307}},"image_offsets":[]},{"id":{"replica_id":0,"value":130},"start":13706,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":308}},"image_offsets":[]},{"id":{"replica_id":0,"value":167},"start":13740,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":309}},"image_offsets":[]},{"id":{"replica_id":0,"value":168},"start":15154,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":310}},"image_offsets":[]},{"id":{"replica_id":0,"value":288},"start":24861,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":311}},"image_offsets":[]},{"id":{"replica_id":0,"value":289},"start":26073,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":312}},"image_offsets":[]}],"summary":"Custom View Details Component for Linear App","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default"},{"range":{"start":3,"end":10141},"icon":"File","label":"linear-app/client/src/views/CustomViews/CustomViewDetails.tsx"},{"range":{"start":15154,"end":24838},"icon":"File","label":"linear-app/client/src/views/Team/components/Insights/components/InsightsFullscreen.tsx"}]}