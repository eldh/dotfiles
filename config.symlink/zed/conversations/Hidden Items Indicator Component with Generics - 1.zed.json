{"id":"fbabc4f5-38dc-4c26-a68c-6d0f10386057","zed":"context","version":"0.4.0","text":"\n\n\n```tsx linear-app/client/src/components/HiddenItemsIndicator/HiddenIndicator.tsx\nimport * as React from \"react\";\nimport lowerCase from \"lodash/lowerCase\";\nimport { observer } from \"mobx-react-lite\";\nimport styled from \"styled-components\";\nimport pluralize from \"pluralize\";\nimport { Flex } from \"@linear/orbiter/components/Flex\";\nimport { Text } from \"@linear/orbiter/components/Text\";\nimport { Tooltip } from \"@linear/orbiter/components/Tooltip\";\nimport { Button } from \"@linear/orbiter/components/Button\";\nimport { useResizeObserver } from \"@linear/orbiter/hooks/useResizeObserver\";\nimport { CloseIcon } from \"@linear/orbiter/icons/base\";\nimport { thinBorderThemed } from \"@linear/orbiter/styles/mixins\";\nimport type { Constructor } from \"@linear/common/types\";\nimport { showUserViewPreferencesId } from \"~/components/ViewOptions/components/ViewOptions\";\nimport { useActionManager } from \"~/hooks/useActionManager\";\nimport { useActionRegistry } from \"~/hooks/useActionRegistry\";\nimport type { CustomView } from \"~/models/CustomView\";\nimport { Issue } from \"~/models/Issue\";\nimport { Project } from \"~/models/Project\";\nimport type { Team } from \"~/models/Team\";\nimport type { Notification } from \"~/models/Notification\";\nimport { Collection, type CollectionFilter, type ReadonlyCollection } from \"~/models/collections\";\nimport type { ViewFilters } from \"~/hooks/useViewFilters\";\nimport type { FilterableModel } from \"~/filters/FilterBlock\";\nimport type { InlineFindable } from \"~/models/InlineFindable\";\nimport { IssueQuickFiltersTab } from \"~/views/QuickFilters/IssuesQuickFilters\";\nimport { ProjectsQuickFiltersTab } from \"~/views/QuickFilters/ProjectsQuickFilters\";\nimport type { UniversalCollectionFilter } from \"~/models/collections/UniversalCollectionFilter\";\nimport type { IssueViewDataProvider } from \"~/components/List/components/dataProviders/IssueViewDataProvider\";\nimport type { ProjectsDataProvider } from \"~/components/List/components/dataProviders/ProjectsDataProvider\";\nimport type { Initiative } from \"~/models/Initiative\";\nimport { useStore } from \"~/hooks/useStore\";\nimport { ProjectMilestone } from \"~/models/ProjectMilestone\";\nimport { fastCreateIssueAction } from \"~/action/actions/IssueCreateActions\";\nimport type { Store } from \"~/models/Store\";\nimport { ComponentLoader } from \"~/components/loadables/ComponentLoader\";\nimport { ViewEmptyState } from \"~/components/ViewEmptyState/ViewEmptyState\";\nimport { PROJECT_MILESTONES_DOCS_URL } from \"~/utils/urls\";\nimport type { PullRequest } from \"~/models/PullRequest\";\nimport type { ViewPreferences } from \"~/models/ViewPreferences\";\nimport type { Hydrated } from \"~/models/base/ModelTypes\";\nimport type { Model } from \"~/models/base/Model\";\nimport {\n  completedIssuesFilter,\n  completedProjectsFilter,\n  subIssuesFilter,\n  triageIssuesFilter,\n} from \"~/helpers/ViewPreferencesHelper\";\nimport type { AnyDataProvider } from \"../List/components/dataProviders/AnyDataProvider\";\n\n/**\n * Component displaying information about hidden items (due to filtering\n * and/or display options) in the list/board/timeline views.\n */\nexport const HiddenItemsIndicatorLegacy = observer(function HiddenItemsIndicatorLegacy_(\n  props: HiddenItemsIndicatorLegacyProps\n) {\n  const { zeroState, filters, items, modelName, hideDisplayOptions, background, className } = props;\n  const actionRegistry = useActionRegistry();\n  const actionManager = useActionManager();\n  const store = useStore();\n  const totalHiddenByDisplayOptions = React.useMemo(() => {\n    switch (modelName) {\n      case \"issue\":\n        return props.itemsHiddenByDisplayOptions.total;\n      case \"project\":\n        return props.itemsHiddenByDisplayOptions?.total;\n      default:\n        return undefined;\n    }\n  }, [props]);\n  const containerRef = React.useRef<React.ElementRef<\"div\">>(null);\n  const [width] = useResizeObserver(containerRef);\n\n  let hiddenByFilters: ReturnType<typeof getHiddenByFilters> | null = null;\n  let filteredItems = items;\n\n  if (modelName === \"issue\") {\n    filteredItems = items?.filter(filters?.getFilters(\"all\") ?? []);\n    hiddenByFilters = getHiddenByFilters(items, filteredItems, filters);\n  } else if (modelName === \"project\") {\n    filteredItems = items?.filter(filters?.getFilters(\"all\") ?? []);\n    hiddenByFilters = getHiddenByFilters(items, filteredItems, filters);\n  } else if (modelName === \"view\") {\n    filteredItems = items?.filter(filters?.getFilters(\"all\") ?? []);\n    hiddenByFilters = getHiddenByFilters(items, filteredItems, filters);\n  } else if (modelName === \"team\") {\n    filteredItems = items?.filter(filters?.getFilters(\"all\") ?? []);\n    hiddenByFilters = getHiddenByFilters(items, filteredItems, filters);\n  } else if (modelName === \"initiative\") {\n    filteredItems = items?.filter(filters?.getFilters(\"all\") ?? []);\n    hiddenByFilters = getHiddenByFilters(items, filteredItems, filters);\n  } else if (modelName === \"pullRequest\") {\n    filteredItems = items?.filter(filters?.getFilters(\"all\") ?? []);\n    hiddenByFilters = getHiddenByFilters(items, filteredItems, filters);\n  } else if (modelName === \"notification\") {\n    filteredItems = items?.filter(filters?.getFilters(\"all\") ?? []);\n    hiddenByFilters = getHiddenByFilters(items, filteredItems, filters);\n  } else if (modelName === \"cycle\" || modelName === \"document\" || modelName === \"customer\") {\n    hiddenByFilters = null;\n  } else if (zeroState) {\n    return null;\n  }\n\n  if (!hiddenByFilters?.total && !totalHiddenByDisplayOptions && !zeroState) {\n    return null;\n  }\n\n  // Special zero state case for an empty milestone view (no items match the milestone)\n  if (\n    zeroState &&\n    modelName === \"issue\" &&\n    filters?.quick.projectMilestone &&\n    hiddenByFilters &&\n    hiddenByFilters.projectMilestone === hiddenByFilters.total &&\n    !!hiddenByFilters.projectMilestone &&\n    !totalHiddenByDisplayOptions\n  ) {\n    const milestone = getMilestoneFromFilters(filters, store);\n\n    if (milestone) {\n      return (\n        <ViewEmptyState\n          icon={<LazyEmptyMilestoneImage />}\n          primaryLabel=\"Create new issue\"\n          title={milestone.name}\n          paragraphs={[\"Add issues to milestone\"]}\n          primaryAction={fastCreateIssueAction}\n          secondaryLink={PROJECT_MILESTONES_DOCS_URL}\n        />\n      );\n    }\n  }\n\n  const isFiltering = filters?.getFilters(\"all\").some(f => f.isFiltering) ?? false;\n  const isEmptyWithFilters = zeroState && filteredItems?.length === 0 && isFiltering;\n\n  const universalFilterCount = filters?.universal?.filterCount ?? 0;\n  const isSpaceConstrained =\n    (width ?? 0) < 700 &&\n    !!hiddenByFilters?.total &&\n    !hideDisplayOptions &&\n    !!totalHiddenByDisplayOptions &&\n    !zeroState;\n\n  let quickFilterLabel: string | undefined;\n  if (hiddenByFilters?.quick && modelName === \"issue\") {\n    quickFilterLabel = issueQuickFilterToName[hiddenByFilters.quick[0] as IssueQuickFiltersTab];\n  } else if (hiddenByFilters?.quick && modelName === \"project\") {\n    quickFilterLabel = projectQuickFilterToName[hiddenByFilters.quick[0] as ProjectsQuickFiltersTab];\n  }\n\n  function showEditDisplayOptions() {\n    const showViewPreferencesAction = actionRegistry.findActionById(showUserViewPreferencesId);\n    if (showViewPreferencesAction) {\n      void actionManager.executeAction(showViewPreferencesAction);\n    }\n  }\n\n  function clearAllFilters() {\n    filters?.getFilters(\"all\").forEach(filter => filter.reset());\n  }\n\n  const clearFiltersButton = (\n    <Button kind=\"borderless\" onClick={clearAllFilters} size=\"small\">\n      <Flex gap={6} align=\"center\">\n        <span>{isSpaceConstrained ? \"Clear\" : \"Clear Filters\"}</span>\n        <SmallCloseIcon />\n      </Flex>\n    </Button>\n  );\n\n  const showDisplayOptionsButton = (\n    <Button kind=\"borderless\" size=\"small\" onClick={showEditDisplayOptions}>\n      <span>{isSpaceConstrained ? \"Show\" : \"Show options\"}</span>\n    </Button>\n  );\n\n  const filteredElement = hiddenByFilters?.total ? (\n    <HiddenItemsIndicatorRow\n      total={hiddenByFilters.total}\n      label=\"hidden by filters\"\n      action={clearFiltersButton}\n      modelName={modelName}\n      isSpaceConstrained={isSpaceConstrained}\n      breakdown={[\n        quickFilterLabel ? { label: `Selected ${quickFilterLabel}`, total: hiddenByFilters.quick?.[1] ?? 0 } : null,\n        {\n          label:\n            universalFilterCount === 1\n              ? \"View filter\"\n              : `${universalFilterCount} view ${pluralize(\"filter\", universalFilterCount)}`,\n          total: hiddenByFilters.universal,\n        },\n        { label: \"Find in view\", total: hiddenByFilters.inline },\n        { label: \"Selected Insight\", total: hiddenByFilters.insights },\n        { label: \"Selected milestone\", total: hiddenByFilters.projectMilestone },\n      ].filter(Boolean)}\n    />\n  ) : null;\n\n  const breakdown = [];\n  if (modelName === \"issue\") {\n    breakdown.push({ label: \"Triaged\", total: props.itemsHiddenByDisplayOptions.triage ?? 0 });\n    breakdown.push({ label: \"Sub-issues\", total: props.itemsHiddenByDisplayOptions.subIssues ?? 0 });\n  }\n  if (modelName === \"issue\" || modelName === \"project\") {\n    breakdown.push({ label: \"Completed\", total: props.itemsHiddenByDisplayOptions?.completed ?? 0 });\n  }\n\n  const displayOptionsElement =\n    !hideDisplayOptions && totalHiddenByDisplayOptions ? (\n      <HiddenItemsIndicatorRow\n        total={totalHiddenByDisplayOptions}\n        label={\n          isSpaceConstrained\n            ? `by display options`\n            : `${hiddenByFilters?.total ? \"more \" : \"\"} hidden by display options`\n        }\n        isSpaceConstrained={isSpaceConstrained}\n        modelName={!hiddenByFilters?.total ? modelName : undefined}\n        action={showDisplayOptionsButton}\n        breakdown={breakdown}\n      />\n    ) : null;\n\n  function getZeroStateTitle() {\n    const hiddenByMilestoneFilter = hiddenByFilters?.projectMilestone ?? 0;\n    if (hiddenByMilestoneFilter > 0 && filters && modelName === \"issue\") {\n      return `No issues matching the filters in the milestone`;\n    }\n    if (isEmptyWithFilters) {\n      return `No ${pluralize(lowerCase(modelName))} matching the filters`;\n    }\n    return `No matching ${pluralize(lowerCase(modelName))}`;\n  }\n\n  if (zeroState) {\n    return (\n      <EmptyStateContainer auto column align=\"center\" justify=\"center\" $background={background} ref={containerRef}>\n        <Flex column gap={20} align=\"center\">\n          <React.Suspense fallback={<div style={{ width: 140, height: 84 }} />}>\n            <LazyFilteredEmptyIcon />\n          </React.Suspense>\n          <Text color=\"labelMuted\" type=\"regularPlus\" align=\"center\">\n            {getZeroStateTitle()}\n          </Text>\n          {hiddenByFilters?.total || totalHiddenByDisplayOptions ? (\n            <EmptyStateWrapper>\n              {filteredElement}\n              {displayOptionsElement}\n            </EmptyStateWrapper>\n          ) : null}\n        </Flex>\n      </EmptyStateContainer>\n    );\n  }\n\n  if (!filteredElement && !displayOptionsElement) {\n    return null;\n  }\n\n  return (\n    <HiddenItemsContainer\n      align=\"center\"\n      gap={isSpaceConstrained ? 10 : 20}\n      justify=\"center\"\n      ref={containerRef}\n      className={className}\n    >\n      {filteredElement}\n      {displayOptionsElement}\n    </HiddenItemsContainer>\n  );\n});\n\ninterface HiddenItemsIndicatorProps<T extends FilterableModel & InlineFindable = Issue> {\n  /** items/provider in the view */\n  items: AnyDataProvider<unknown, T>;\n  /** Filters for the view */\n  filters: ViewFilters<T>;\n  /** View preferences */\n  viewPreferences?: Hydrated<ViewPreferences>;\n  /** Should the zero state version (centered on the screen, no elements can be displayed) be rendered */\n  zeroState?: boolean;\n  /** type of model */\n  modelType: typeof Model & Constructor<T>;\n  /** Background for the zero state container */\n  background?: \"secondary\" | \"none\";\n  className?: string;\n}\n\n/**\n * Component displaying information about hidden items (due to filtering\n * and/or display options) in the list/board/timeline views.\n */\nexport const HiddenItemsIndicator = observer(function HiddenItemsIndicator_<\n  T extends FilterableModel & InlineFindable = Issue,\n>(props: HiddenItemsIndicatorProps<T>) {\n  const { filters, items, viewPreferences, zeroState, background, className } = props;\n  const modelType = props.modelType as typeof props.modelType & Constructor<T>;\n  const actionRegistry = useActionRegistry();\n  const actionManager = useActionManager();\n  const store = useStore();\n  const modelName = \"issue\";\n\n  // TODO fix type hacks\n  const filteredItems = Collection.of(\n    modelType as typeof props.modelType & Constructor<T>,\n    items.filteredItems\n  ) as unknown as ReadonlyCollection<T>;\n  const unfilteredItems = Collection.of(\n    modelType as typeof props.modelType & Constructor<T>,\n    items.unfilteredItems\n  ) as unknown as ReadonlyCollection<T>;\n  const allItems = (items.allItems || unfilteredItems) as ReadonlyCollection<T>;\n  const hiddenByDisplayOptions = allItems.length - unfilteredItems.length;\n\n  const getBreakdown = React.useCallback((): { total: number; label: string }[] => {\n    if ((modelType as unknown) === Issue) {\n      const issues = allItems as unknown as ReadonlyCollection<Issue>;\n      return [\n        { label: \"Total\", total: hiddenByDisplayOptions },\n        { label: \"Sub-issues\", total: issues.filter(subIssuesFilter).length },\n        {\n          label: \"Completed\",\n          total: issues.filter(completedIssuesFilter(viewPreferences?.getPreference(\"showCompletedIssues\") ?? \"all\"))\n            .length,\n        },\n        { label: \"Triage\", total: issues.filter(triageIssuesFilter).length },\n      ];\n    } else if ((modelType as unknown) === Project) {\n      const projects = allItems as unknown as ReadonlyCollection<Project>;\n      return [\n        {\n          label: \"Completed\",\n          total: projects.filter(\n            completedProjectsFilter(viewPreferences?.getPreference(\"showCompletedProjects\") ?? \"all\")\n          ).length,\n        },\n      ];\n    }\n    return [];\n  }, [hiddenByDisplayOptions, allItems, viewPreferences]);\n\n  const containerRef = React.useRef<React.ElementRef<\"div\">>(null);\n  const [width] = useResizeObserver(containerRef);\n\n  const hiddenByFilters: ReturnType<typeof getHiddenByFilters> | null = getHiddenByFilters(\n    unfilteredItems,\n    filteredItems,\n    filters\n  );\n\n  if (!hiddenByFilters?.total && !hiddenByDisplayOptions && !zeroState) {\n    return null;\n  }\n\n  // Special zero state case for an empty milestone view (no items match the milestone)\n  if (\n    zeroState &&\n    modelName === \"issue\" &&\n    filters &&\n    \"projectMilestone\" in filters.quick &&\n    filters.quick.projectMilestone &&\n    hiddenByFilters &&\n    hiddenByFilters.projectMilestone === hiddenByFilters.total &&\n    !!hiddenByFilters.projectMilestone &&\n    !hiddenByDisplayOptions\n  ) {\n    const milestone = getMilestoneFromFilters(filters as ViewFilters<Issue>, store);\n\n    if (milestone) {\n      return (\n        <ViewEmptyState\n          icon={<LazyEmptyMilestoneImage />}\n          primaryLabel=\"Create new issue\"\n          title={milestone.name}\n          paragraphs={[\"Add issues to milestone\"]}\n          primaryAction={fastCreateIssueAction}\n          secondaryLink={PROJECT_MILESTONES_DOCS_URL}\n        />\n      );\n    }\n  }\n\n  const isFiltering = filters?.getFilters(\"all\").some(f => f.isFiltering) ?? false;\n  const isEmptyWithFilters = zeroState && filteredItems?.length === 0 && isFiltering;\n\n  const universalFilterCount = filters?.universal?.filterCount ?? 0;\n  const isSpaceConstrained =\n    (width ?? 0) < 700 && !!hiddenByFilters?.total && !!viewPreferences && !!hiddenByDisplayOptions && !zeroState;\n\n  let quickFilterLabel: string | undefined;\n  if (hiddenByFilters?.quick) {\n    if ((modelType as unknown) === Issue) {\n      quickFilterLabel = issueQuickFilterToName[hiddenByFilters.quick[0] as IssueQuickFiltersTab];\n    } else {\n      quickFilterLabel = projectQuickFilterToName[hiddenByFilters.quick[0] as ProjectsQuickFiltersTab];\n    }\n  }\n\n  function showEditDisplayOptions() {\n    const showViewPreferencesAction = actionRegistry.findActionById(showUserViewPreferencesId);\n    if (showViewPreferencesAction) {\n      void actionManager.executeAction(showViewPreferencesAction);\n    }\n  }\n\n  function clearAllFilters() {\n    filters?.getFilters(\"all\").forEach(filter => filter.reset());\n  }\n\n  const clearFiltersButton = (\n    <Button kind=\"borderless\" onClick={clearAllFilters} size=\"small\">\n      <Flex gap={6} align=\"center\">\n        <span>{isSpaceConstrained ? \"Clear\" : \"Clear Filters\"}</span>\n        <SmallCloseIcon />\n      </Flex>\n    </Button>\n  );\n\n  const showDisplayOptionsButton = (\n    <Button kind=\"borderless\" size=\"small\" onClick={showEditDisplayOptions}>\n      <span>{isSpaceConstrained ? \"Show\" : \"Show options\"}</span>\n    </Button>\n  );\n\n  const filteredElement = hiddenByFilters?.total ? (\n    <HiddenItemsIndicatorRow\n      total={hiddenByFilters.total}\n      label=\"hidden by filters\"\n      action={clearFiltersButton}\n      modelName={modelName}\n      isSpaceConstrained={isSpaceConstrained}\n      breakdown={[\n        quickFilterLabel ? { label: `Selected ${quickFilterLabel}`, total: hiddenByFilters.quick?.[1] ?? 0 } : null,\n        {\n          label:\n            universalFilterCount === 1\n              ? \"View filter\"\n              : `${universalFilterCount} view ${pluralize(\"filter\", universalFilterCount)}`,\n          total: hiddenByFilters.universal,\n        },\n        { label: \"Find in view\", total: hiddenByFilters.inline },\n        { label: \"Selected Insight\", total: hiddenByFilters.insights },\n        { label: \"Selected milestone\", total: hiddenByFilters.projectMilestone },\n      ].filter(Boolean)}\n    />\n  ) : null;\n\n  const displayOptionsElement =\n    !!viewPreferences && hiddenByDisplayOptions ? (\n      <HiddenItemsIndicatorRow\n        total={hiddenByDisplayOptions}\n        label={\n          isSpaceConstrained\n            ? `by display options`\n            : `${hiddenByFilters?.total ? \"more \" : \"\"} hidden by display options`\n        }\n        isSpaceConstrained={isSpaceConstrained}\n        modelName={!hiddenByFilters?.total ? modelName : undefined}\n        action={showDisplayOptionsButton}\n        breakdown={getBreakdown}\n      />\n    ) : null;\n\n  function getZeroStateTitle() {\n    const hiddenByMilestoneFilter = hiddenByFilters?.projectMilestone ?? 0;\n    if (hiddenByMilestoneFilter > 0 && filters && modelName === \"issue\") {\n      return `No issues matching the filters in the milestone`;\n    }\n    if (isEmptyWithFilters) {\n      return `No ${pluralize(lowerCase(modelName))} matching the filters`;\n    }\n    return `No matching ${pluralize(lowerCase(modelName))}`;\n  }\n\n  if (zeroState) {\n    return (\n      <EmptyStateContainer auto column align=\"center\" justify=\"center\" $background={background} ref={containerRef}>\n        <Flex column gap={20} align=\"center\">\n          <React.Suspense fallback={<div style={{ width: 140, height: 84 }} />}>\n            <LazyFilteredEmptyIcon />\n          </React.Suspense>\n          <Text color=\"labelMuted\" type=\"regularPlus\" align=\"center\">\n            {getZeroStateTitle()}\n          </Text>\n          {hiddenByFilters?.total || hiddenByDisplayOptions ? (\n            <EmptyStateWrapper>\n              {filteredElement}\n              {displayOptionsElement}\n            </EmptyStateWrapper>\n          ) : null}\n        </Flex>\n      </EmptyStateContainer>\n    );\n  }\n\n  if (!filteredElement && !displayOptionsElement) {\n    return null;\n  }\n\n  return (\n    <HiddenItemsContainer\n      align=\"center\"\n      gap={isSpaceConstrained ? 10 : 20}\n      justify=\"center\"\n      ref={containerRef}\n      className={className}\n    >\n      {filteredElement}\n      {displayOptionsElement}\n    </HiddenItemsContainer>\n  );\n});\n\n/**\n * HiddenItemsIndicator to be displayed as a list footer.\n */\nexport const ListFooterHiddenItemsIndicator = styled(HiddenItemsIndicatorLegacy)`\n  display: flex;\n  justify-content: center;\n  flex-direction: row;\n  padding: 0 34px;\n  margin-top: 40px;\n  height: 100%;\n\n  &:empty {\n    display: none;\n  }\n`;\n\nconst HiddenItemsContainer = styled(Flex)`\n  width: 100%;\n`;\n\ntype HiddenItemsIndicatorRowProps = {\n  /** Total number of hidden items. */\n  total: number;\n  /** Text to be displayed next to the hidden items count. */\n  label: string;\n  /** Action(s) to be displayed next to the hidden items count. */\n  action?: React.ReactNode;\n  /** Breakdown of the hidden items by different groups (eg. inline filter, view filter, etc.) */\n  breakdown:\n    | {\n        /** Label for the group */\n        label: string;\n        /** Total number for the group */\n        total: number;\n      }[]\n    | (() => {\n        /** Label for the group */\n        label: string;\n        /** Total number for the group */\n        total: number;\n      }[]);\n  /** If set to true, text will be condensed and actions hidden. Should only be true if there's not enough space on the\n   * screen to show. */\n  isSpaceConstrained?: boolean;\n  /** The name of the model that is hidden. e.g \"issue\" */\n  modelName?: string;\n};\n\n/**\n * A single row displaying hidden items count/text and optionally some actions along side.\n */\nexport function HiddenItemsIndicatorRow({\n  total,\n  action,\n  breakdown,\n  label,\n  isSpaceConstrained,\n  modelName,\n}: HiddenItemsIndicatorRowProps) {\n  return (\n    <Flex align=\"center\" gap={isSpaceConstrained ? 4 : 8}>\n      <Tooltip\n        position=\"bottom\"\n        title={() => {\n          const breakdown_ = typeof breakdown === \"function\" ? breakdown() : breakdown;\n          const activeBreakdown = breakdown_.filter(row => !!row.total);\n          return activeBreakdown.length > 0 ? (\n            <Flex column gap={2}>\n              {breakdown_\n                .filter(row => !!row.total)\n                .map(row => (\n                  <Flex justify=\"space-between\" align=\"center\" gap={4} key={row.label}>\n                    <Text type=\"small\" color=\"labelMuted\">\n                      {row.label}\n                    </Text>\n                    <NumberCell nowrap>{row.total}</NumberCell>\n                  </Flex>\n                ))}\n            </Flex>\n          ) : null;\n        }}\n        align=\"baseline\"\n      >\n        <NumberCell $withBg nowrap>\n          {total}\n          {isSpaceConstrained || !modelName ? \"\" : ` ${pluralize(lowerCase(modelName), total)}`}\n        </NumberCell>{\" \"}\n        <Text type=\"mini\" color=\"labelMuted\" nowrap>\n          {label}\n        </Text>\n      </Tooltip>\n      <ActionContainer>{action}</ActionContainer>\n    </Flex>\n  );\n}\n\nconst EmptyStateWrapper = styled.div`\n  border: ${thinBorderThemed(\"bgBorder\")};\n  border-radius: 5px;\n  min-width: 350px;\n  > * {\n    padding: 16px;\n    justify-content: space-between;\n  }\n\n  > *:not(:last-child) {\n    border-bottom: ${thinBorderThemed(\"bgBorder\")};\n  }\n`;\n\nconst ActionContainer = styled(Flex)`\n  min-width: 100px;\n\n  ${EmptyStateWrapper} & {\n    justify-content: flex-end;\n  }\n`;\n\nconst SmallCloseIcon = styled(CloseIcon)`\n  width: 12px !important;\n  height: 12px !important;\n`;\n\nconst NumberCell = styled(Text).attrs({ type: \"miniPlus\" })<{ $withBg?: boolean }>`\n  border-radius: 3px;\n  padding: 3px 5px;\n`;\n\nconst EmptyStateContainer = styled(Flex)<{ $background?: \"secondary\" | \"none\" }>`\n  padding: 120px 60px;\n  @media (max-height: 600px) {\n    padding: 30px 60px;\n  }\n  background: ${props => (props.$background === \"secondary\" ? props.theme.color.bgBase : \"none\")};\n`;\n\nfunction getMilestoneFromFilters(filters: ViewFilters<Issue>, store: Store) {\n  const projectMilestoneId = filters.quick.projectMilestone?.filter?.projectMilestone?.id?.eq;\n  const milestone = projectMilestoneId ? store.findById(ProjectMilestone, projectMilestoneId) : null;\n  return milestone;\n}\n\n/**\n * Returns the number of filterable hidden by each filter\n */\nfunction getHiddenByFilters<T extends FilterableModel & InlineFindable>(\n  items?: ReadonlyCollection<T>,\n  filteredItems?: ReadonlyCollection<T>,\n  filters?: ViewFilters<T>\n) {\n  if (!filters || !items || !filteredItems) {\n    return null;\n  }\n\n  const activeQuickFilter = (Object.entries(filters.quick) as [string, CollectionFilter<T>][])\n    .filter(([key]) => key !== \"projectMilestone\") // we display the milestone filter as a separate row\n    .find(([_, filter]) => filter.isFiltering);\n  const quickFilterTotal = activeQuickFilter ? items.length - items.filter(activeQuickFilter[1]).length : 0;\n\n  return {\n    total: items.length - filteredItems.length,\n    universal: items.length - items.filter(filters.universal).length,\n    inline: items.length - items.filter(filters.inline).length,\n    insights: items.length - items.filter(filters.insights).length,\n    projectMilestone:\n      \"projectMilestone\" in filters.quick\n        ? items.length - items.filter(filters.quick.projectMilestone as UniversalCollectionFilter<T>).length\n        : 0,\n    quick: activeQuickFilter ? ([activeQuickFilter[0], quickFilterTotal] as const) : null,\n  } as const;\n}\n\nconst issueQuickFilterToName: Record<IssueQuickFiltersTab, string> = {\n  [IssueQuickFiltersTab.assignee]: \"assignee\",\n  [IssueQuickFiltersTab.label]: \"label\",\n  [IssueQuickFiltersTab.priority]: \"priority\",\n  [IssueQuickFiltersTab.project]: \"project\",\n  [IssueQuickFiltersTab.projectMilestone]: \"milestone\",\n  [IssueQuickFiltersTab.team]: \"team\",\n  [IssueQuickFiltersTab.cycle]: \"cycle\",\n};\n\nconst projectQuickFilterToName: Record<ProjectsQuickFiltersTab, string> = {\n  [ProjectsQuickFiltersTab.lead]: \"lead\",\n  [ProjectsQuickFiltersTab.team]: \"team\",\n  [ProjectsQuickFiltersTab.initiative]: \"initiative\",\n  [ProjectsQuickFiltersTab.health]: \"health\",\n  [ProjectsQuickFiltersTab.status]: \"status\",\n};\n\ntype HiddenItemsIndicatorLegacyProps = ModelProps & {\n  /** Should the stats for models hidden by display options be hidden */\n  hideDisplayOptions?: boolean;\n  /** Should the zero state version (centered on the screen, no elements can be displayed) be rendered */\n  zeroState?: boolean;\n  /** Background for the zero state container */\n  background?: \"secondary\" | \"none\";\n  className?: string;\n};\n\ntype IssueHiddenDisplayOptions = IssueViewDataProvider[\"itemsHiddenByDisplayOptions\"];\ntype ProjectHiddenDisplayOptions = ProjectsDataProvider[\"itemsHiddenByDisplayOptions\"];\n\ntype ModelProps =\n  | {\n      /** Name of the model of the items in the view */\n      modelName: \"issue\";\n      /** All view filters (if applicable) */\n      filters?: ViewFilters<Issue>;\n      /** Collection of all items displayed in the view (unfiltered) */\n      items?: ReadonlyCollection<Issue>;\n      /** Stats for items hidden by display options */\n      itemsHiddenByDisplayOptions: IssueHiddenDisplayOptions;\n    }\n  | {\n      /** Name of the model of the items in the view */\n      modelName: \"project\";\n      /** All view filters (if applicable) */\n      filters?: ViewFilters<Project>;\n      /** Collection of all items displayed in the view (unfiltered) */\n      items?: ReadonlyCollection<Project>;\n      /** Stats for items hidden by display options */\n      itemsHiddenByDisplayOptions?: ProjectHiddenDisplayOptions;\n    }\n  | {\n      /** Name of the model of the items in the view */\n      modelName: \"view\";\n      /** All view filters (if applicable) */\n      filters?: ViewFilters<CustomView>;\n      /** Collection of all items displayed in the view (unfiltered) */\n      items?: ReadonlyCollection<CustomView>;\n    }\n  | {\n      /** Name of the model of the items in the view */\n      modelName: \"initiative\";\n      /** All view filters (if applicable) */\n      filters?: ViewFilters<Initiative>;\n      /** Collection of all items displayed in the view (unfiltered) */\n      items?: ReadonlyCollection<Initiative>;\n    }\n  | {\n      /** Name of the model of the items in the view */\n      modelName: \"team\";\n      /** All view filters (if applicable) */\n      filters?: ViewFilters<Team>;\n      /** Collection of all items displayed in the view (unfiltered) */\n      items?: ReadonlyCollection<Team>;\n    }\n  | {\n      /** Name of the model of the items in the view */\n      modelName: \"notification\";\n      /** All view filters (if applicable) */\n      filters?: ViewFilters<Notification>;\n      /** Collection of all items displayed in the view (unfiltered) */\n      items?: ReadonlyCollection<Notification>;\n    }\n  | {\n      /** Name of the model of the items in the view */\n      modelName: \"cycle\";\n      /** All view filters (if applicable) */\n      filters?: never;\n      /** Collection of all items displayed in the view (unfiltered) */\n      items?: never;\n    }\n  | {\n      /** Name of the model of the items in the view */\n      modelName: \"document\";\n      /** All view filters (if applicable) */\n      filters?: never;\n      /** Collection of all items displayed in the view (unfiltered) */\n      items?: never;\n    }\n  | {\n      /** Name of the model of the items in the view */\n      modelName: \"customer\";\n      /** All view filters (if applicable) */\n      filters?: never;\n      /** Collection of all items displayed in the view (unfiltered) */\n      items?: never;\n    }\n  | {\n      /** Name of the model of the items in the view */\n      modelName: \"pullRequest\";\n      /** All view filters (if applicable) */\n      filters?: ViewFilters<PullRequest>;\n      /** Collection of all items displayed in the view (unfiltered) */\n      items?: ReadonlyCollection<PullRequest>;\n    };\n\nconst LazyEmptyMilestoneImage = ComponentLoader.protectedLoadable(\n  () => import(\"./EmptyMilestoneImage\").then(m => m.EmptyMilestoneImage),\n  {\n    preloadOrder: \"last\",\n    loadAtStartupForPath: \"/:org/project/:project/*\",\n    resolveComponent: module => module,\n  }\n);\n\nconst LazyFilteredEmptyIcon = ComponentLoader.protectedLoadable(() => import(\"~/components/FilteredEmptyIcon\"), {\n  preloadOrder: \"last\",\n  resolveComponent: component => component.FilteredEmptyIconShouldBeLazyLoaded,\n});\n```\n\nexpose the generics on HiddenItemsIndicator\nTo expose the generics on the `HiddenItemsIndicator` component, you can modify its declaration like this:\n\n```typescript\nexport const HiddenItemsIndicator = observer(function HiddenItemsIndicator_<\n  T extends FilterableModel & InlineFindable = Issue,\n>(props: HiddenItemsIndicatorProps<T>) {\n  // ... component implementation ...\n});\n```\n\nThis change allows users of the component to specify the generic type `T` when using `HiddenItemsIndicator`, providing more flexibility and type safety.\n\nFor example, it could be used like this:\n\n```typescript\n<HiddenItemsIndicator<Project> \n  items={projectItems}\n  filters={projectFilters}\n  viewPreferences={projectViewPreferences}\n  modelType={Project}\n  // ... other props\n/>\n```\n\nThis modification ensures that the component can be used with different model types while maintaining type safety throughout the component's implementation.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":619}}},{"id":{"replica_id":0,"value":23},"start":29976,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":620}}},{"id":{"replica_id":0,"value":24},"start":30859,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":621}}}],"summary":"Hidden Items Indicator Component with Generics","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":29931},"icon":"File","label":"linear-app/client/src/components/HiddenItemsIndicator/HiddenIndicator.tsx","metadata":{"path":"linear-app/client/src/components/HiddenItemsIndicator/HiddenIndicator.tsx"}}]}