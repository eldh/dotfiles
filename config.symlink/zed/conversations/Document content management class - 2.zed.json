{"id":"5e304624-23e0-4a8a-a443-6f700c12fcb3","zed":"context","version":"0.4.0","text":"```tsx linear-app/client/src/components/List/ViewDataActionContext.tsx\nimport type { GroupedViewState } from \"@linear/orbiter/components/GroupedView/GroupedViewState\";\nimport type { GroupedViewItem } from \"@linear/orbiter/components/GroupedView/GroupedViewTypes\";\nimport type { ViewPreferences } from \"~/models/ViewPreferences\";\n\n/** Action metadata for accessing data related to the current view */\nexport interface IViewDataActionContext<T> {\n  filteredItems: T[];\n  data: GroupedViewItem<T>[];\n  viewState: GroupedViewState;\n  viewPreferences?: ViewPreferences;\n}\n\n```\nwrite a class that implements the `IViewDataActionContext` interface. it should take a \"provider\", a viewState, and a viewPreferences as arguments. the provider has getters for data and filteredItems\nHere's a class that implements the `IViewDataActionContext` interface based on your requirements:\n\n```typescript\nimport type { GroupedViewState } from \"@linear/orbiter/components/GroupedView/GroupedViewState\";\nimport type { GroupedViewItem } from \"@linear/orbiter/components/GroupedView/GroupedViewTypes\";\nimport type { ViewPreferences } from \"~/models/ViewPreferences\";\nimport { IViewDataActionContext } from \"./ViewDataActionContext\";\n\ninterface DataProvider<T> {\n  get data(): GroupedViewItem<T>[];\n  get filteredItems(): T[];\n}\n\nexport class ViewDataActionContext<T> implements IViewDataActionContext<T> {\n  private provider: DataProvider<T>;\n  public viewState: GroupedViewState;\n  public viewPreferences?: ViewPreferences;\n\n  constructor(\n    provider: DataProvider<T>,\n    viewState: GroupedViewState,\n    viewPreferences?: ViewPreferences\n  ) {\n    this.provider = provider;\n    this.viewState = viewState;\n    this.viewPreferences = viewPreferences;\n  }\n\n  get filteredItems(): T[] {\n    return this.provider.filteredItems;\n  }\n\n  get data(): GroupedViewItem<T>[] {\n    return this.provider.data;\n  }\n}\n```\n\nThis class, `ViewDataActionContext`, implements the `IViewDataActionContext` interface. Here's a breakdown of its components:\n\n1. We define a `DataProvider` interface that describes the shape of the provider object, which has getters for `data` and `filteredItems`.\n\n2. The class takes three arguments in its constructor:\n   - `provider`: An object that conforms to the `DataProvider` interface\n   - `viewState`: A `GroupedViewState` object\n   - `viewPreferences`: An optional `ViewPreferences` object\n\n3. The `viewState` and `viewPreferences` are stored as public properties, as they are directly exposed in the interface.\n\n4. The `provider` is stored as a private property, as it's used internally to retrieve data.\n\n5. We implement getter methods for `filteredItems` and `data` that simply return the corresponding values from the provider.\n\nThis implementation allows you to create a `ViewDataActionContext` object like this:\n\n```typescript\nconst provider = {\n  get data() { /* ... */ },\n  get filteredItems() { /* ... */ }\n};\nconst viewState = /* ... */;\nconst viewPreferences = /* ... */;\n\nconst context = new ViewDataActionContext(provider, viewState, viewPreferences);\n```\n\nYou can then use this `context` object wherever an `IViewDataActionContext` is expected, and it will provide access to the filtered items, data, view state, and view preferences as defined in the interface.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":743}},"image_offsets":[]},{"id":{"replica_id":0,"value":737},"start":772,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":744}},"image_offsets":[]},{"id":{"replica_id":0,"value":738},"start":3278,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":745}},"image_offsets":[]}],"summary":"Document content management class","slash_command_output_sections":[{"range":{"start":0,"end":571},"icon":"File","label":"linear-app/client/src/components/List/ViewDataActionContext.tsx"}]}